class Solution {
    public static void backtrack(String digits,int i,String[] mapping,StringBuilder sb,List<String> res)
    {
        if(i==digits.length())
        {
            res.add(sb.toString());
            return;
        }
        String curr=mapping[digits.charAt(i)-'0'];
        for(int k=0;k<curr.length();k++)
        {
          sb.append(curr.charAt(k));
          backtrack(digits,i+1,mapping,sb,res);
          sb.deleteCharAt(sb.length()-1);
        }
    }
    public List<String> letterCombinations(String digits) {
        List<String> res=new ArrayList<>();
        if(digits.length()==0)
        {
          return res;
        }
        String[] mapping = new String[] {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        backtrack(digits,0,mapping,new StringBuilder(),res);
        return res;
    }
}
